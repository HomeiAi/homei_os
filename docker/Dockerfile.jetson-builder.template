# Use NVIDIA L4T base image for Jetson compatibility (Jetson Linux {{L4T_VERSION}} / JetPack {{JETPACK_VERSION}})
FROM {{L4T_BASE_IMAGE}}

# Set build arguments
ARG VERSION=unknown
ARG BUILD_DATE
ARG HOMIE_BRANCH=main

# Labels for metadata
LABEL maintainer="Homie OS Team"
LABEL version="${VERSION}"
LABEL description="Homie OS for NVIDIA Jetson Orin Nano"
LABEL build-date="${BUILD_DATE}"

# Environment variables
ENV DEBIAN_FRONTEND={{DEBIAN_FRONTEND}}
ENV HOMIE_VERSION=${VERSION}
ENV CUDA_VERSION={{CUDA_VERSION}}
ENV TRT_VERSION={{TENSORRT_VERSION}}
ENV JETPACK_VERSION={{JETPACK_VERSION}}

# Update package lists and install base packages
RUN apt-get update && apt-get install -y \
    # System essentials
    systemd \
    systemd-sysv \
    init \
    dbus \
    # Locale and timezone
    locales \
    tzdata \
    # Network and utilities
    network-manager \
    openssh-server \
    curl \
    wget \
    vim \
    nano \
    htop \
    tree \
    jq \
    # Development tools
    git \
    build-essential \
    python3 \
    python3-pip \
    python3-venv \
    # Filesystem tools for bundle creation
    e2fsprogs \
    rsync \
    # Container runtime
    docker.io \
    docker-compose \
    # Security and monitoring
    fail2ban \
    logrotate \
    rsyslog \
    && rm -rf /var/lib/apt/lists/*

# Configure locales and timezone
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime && dpkg-reconfigure -f noninteractive tzdata

# Install Python packages for Homie OS
RUN pip3 install --no-cache-dir \
    fastapi \
    uvicorn \
    docker \
    pyyaml \
    requests \
    psutil \
    prometheus-client \
    pydantic

# Create system users and directories
RUN groupadd -r homie && useradd -r -g homie homie
RUN mkdir -p /opt/homie/{bin,config,data,logs}
RUN mkdir -p /data/{app,system,backups,logs}
RUN chown -R homie:homie /opt/homie /data

# Copy Homie OS components
COPY homie_orchestrator/ /opt/homie/orchestrator/
COPY homie_ai/ /opt/homie/ai/
COPY homie_os/config/ /opt/homie/config/
COPY homie_os/scripts/system/ /opt/homie/scripts/

# Install Homie Orchestrator
WORKDIR /opt/homie/orchestrator
RUN pip3 install --no-cache-dir -r requirements.txt

# Set up Homie Orchestrator service
COPY homie_os/config/systemd/homie-orchestrator.service /etc/systemd/system/
RUN systemctl enable homie-orchestrator

# Prepare AI stack for deployment
RUN mkdir -p /opt/homie/ai-stack
RUN cp -r /opt/homie/ai/* /opt/homie/ai-stack/
RUN chown -R homie:homie /opt/homie/ai-stack

# Copy systemd service files
COPY homie_os/config/systemd/ /etc/systemd/system/

# Set up Homie OS services
RUN systemctl enable homie-orchestrator
RUN systemctl enable homie-first-boot
RUN systemctl enable docker
RUN systemctl enable ssh

# Configure SSH (disable root login, enable key auth)
RUN mkdir -p /home/homie/.ssh
RUN echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
RUN echo "PermitRootLogin no" >> /etc/ssh/sshd_config
RUN echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config

# Configure network (use NetworkManager)
RUN systemctl enable NetworkManager
RUN systemctl disable systemd-networkd

# Set up log rotation (placeholder)
# COPY config/logrotate.d/ /etc/logrotate.d/

# Configure system limits (placeholder)
# COPY config/limits.conf /etc/security/limits.conf

# Set version information
RUN echo "${VERSION}" > /etc/homie-version
RUN echo "build_date=${BUILD_DATE}" >> /etc/homie-build-info
RUN echo "base_image={{L4T_BASE_IMAGE}}" >> /etc/homie-build-info
RUN echo "jetpack_version={{JETPACK_VERSION}}" >> /etc/homie-build-info
RUN echo "jetson_linux={{L4T_VERSION}}" >> /etc/homie-build-info

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    find /var/log -type f -exec truncate -s 0 {} \;

# Set proper permissions
RUN chmod +x /opt/homie/bin/* 2>/dev/null || true
RUN chmod +x /opt/homie/scripts/* 2>/dev/null || true
RUN chmod +x /opt/homie/scripts/system/* 2>/dev/null || true
RUN chmod +x /opt/homie/orchestrator/scripts/* 2>/dev/null || true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["/sbin/init"]
