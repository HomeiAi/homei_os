name: Build and Publish Homie OS Bundle

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0-alpha.1)'
        required: false
        default: ''
      release_type:
        description: 'Release type'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc
          - release

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/homie-os

jobs:
  version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.version }}" ]]; then
            # Manual dispatch with specific version
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tag push - use tag as version (remove 'v' prefix if present)
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            # Generate version based on commit info
            BRANCH_NAME="${{ github.ref_name }}"
            COMMIT_SHA="${{ github.sha }}"
            COMMIT_SHORT="${COMMIT_SHA:0:7}"
            DATE=$(date +%Y%m%d)
            
            if [[ "$BRANCH_NAME" == "main" ]]; then
              VERSION="1.0.0-alpha.${DATE}.${COMMIT_SHORT}"
            else
              # Clean branch name for version
              CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              VERSION="0.0.0-${CLEAN_BRANCH}.${DATE}.${COMMIT_SHORT}"
            fi
          fi
          
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build ARM64 Image and Bundle
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Homie OS
        uses: actions/checkout@v4
        with:
          path: homie_os

      - name: Checkout Homie Orchestrator
        uses: actions/checkout@v4
        with:
          repository: HomieAiOS/homie_orchestrator
          path: homie_orchestrator
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Homie AI
        uses: actions/checkout@v4
        with:
          repository: HomieAiOS/homie_ai
          path: homie_ai
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Install RAUC
        run: |
          # Install RAUC for bundle creation
          sudo apt-get update
          sudo apt-get install -y rauc openssl
          
          # Verify installation
          rauc --version
          echo "RAUC installed successfully"

      - name: Load configuration variables
        id: config
        run: |
          cd homie_os
          echo "Loading configuration from variables.conf..."
          
          # Source the configuration file and export variables
          if [ -f config/variables.conf ]; then
            # Read variables and export them
            while IFS='=' read -r key value; do
              # Skip comments and empty lines
              if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]] && [[ -n "$value" ]]; then
                # Remove any quotes and whitespace
                clean_key=$(echo "$key" | tr -d ' ')
                clean_value=$(echo "$value" | tr -d '"' | tr -d "'")
                echo "${clean_key}=${clean_value}" >> $GITHUB_ENV
                echo "${clean_key}=${clean_value}" >> $GITHUB_OUTPUT
              fi
            done < config/variables.conf
            
            echo "Configuration variables loaded successfully"
          else
            echo "WARNING: variables.conf not found, using defaults"
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.version.outputs.version }}

      - name: Build and create RAUC bundle
        env:
          HOMIE_VERSION: ${{ needs.version.outputs.version }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          COMMIT_SHA: ${{ github.sha }}
          # Use CI-specific Dockerfile that doesn't require NVIDIA registry
          DOCKERFILE_PATH: homie_os/docker/Dockerfile.jetson-builder-ci
        run: |
          echo "=== DEBUGGING DIRECTORY STRUCTURE ==="
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of homie_os directory:"
          ls -la homie_os/
          echo "Contents of homie_os/config:"
          ls -la homie_os/config/ || echo "NOT FOUND"
          echo "Contents of homie_orchestrator:"
          ls -la homie_orchestrator/ || echo "NOT FOUND"
          echo "Contents of homie_ai:"
          ls -la homie_ai/ || echo "NOT FOUND"
          echo "=== END DEBUGGING ==="
          
          cd homie_os
          echo "After cd homie_os - Current working directory: $(pwd)"
          echo "Contents after cd:"
          ls -la
          echo "Building Homie OS ARM64 image and creating RAUC bundle..."
          
          # Debug: Show current directory and structure
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          ls -la
          echo "Parent directory structure:"
          ls -la ..
          echo "Checking if homie_os/config/systemd exists from parent:"
          ls -la ../homie_os/config/systemd/ || echo "NOT FOUND"
          echo "Checking docker context directory (../..):"
          ls -la ../.. || echo "NOT FOUND"
          echo "Checking if systemd exists in context:"
          ls -la ../../homie_os/config/systemd/ || echo "NOT FOUND"
          echo "Checking if scripts exist in context:"
          ls -la ../../homie_os/scripts/ || echo "NOT FOUND"
          echo "Checking if orchestrator exists:"
          ls -la ../../homie_orchestrator/ || echo "NOT FOUND"
          echo "Checking if ai exists:"
          ls -la ../../homie_ai/ || echo "NOT FOUND"
          echo "Current directory before build:"
          pwd
          echo "Docker directory listing:"
          ls -la docker/
          echo "Docker compose file content:"
          cat docker/docker-compose.ci.yml
          
          # Create version info
          echo "HOMIE_VERSION=${{ needs.version.outputs.version }}" > .env
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
          echo "COMMIT_SHA=${{ github.sha }}" >> .env
          
          # Set executable permissions
          chmod +x scripts/docker-build.sh
          
          # Debug: Show path resolution before running script
          echo "=== PATH DEBUGGING ==="
          echo "PWD: $(pwd)"
          echo "scripts directory: $(ls -la scripts/)"
          echo "Checking if docker directory exists: $(ls -la docker/ || echo 'No docker dir')"
          echo "Checking parent directory: $(ls -la ../)"
          echo "======================="
          
          # Run the build script
          ./scripts/docker-build.sh
          
          # Check if build completed successfully
          BUILD_EXIT_CODE=$?
          echo "Build script exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Build script failed with exit code $BUILD_EXIT_CODE"
            exit 1
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: homie_os
          file: homie_os/docker/Dockerfile.jetson-builder-ci
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            HOMIE_VERSION=${{ needs.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}
            CUDA_VERSION=${{ steps.config.outputs.CUDA_VERSION || '12.2' }}
            TENSORRT_VERSION=${{ steps.config.outputs.TENSORRT_VERSION || '10.0' }}
            JETPACK_VERSION=${{ steps.config.outputs.JETPACK_VERSION || '6.0' }}
            L4T_VERSION=${{ steps.config.outputs.L4T_VERSION || 'r36.2.0' }}
            TARGET_ARCHITECTURE=${{ steps.config.outputs.TARGET_ARCHITECTURE || 'arm64' }}
            CONTAINER_TIMEZONE=${{ steps.config.outputs.CONTAINER_TIMEZONE || 'UTC' }}
            DEBIAN_FRONTEND=${{ steps.config.outputs.DEBIAN_FRONTEND || 'noninteractive' }}
            CI_BASE_IMAGE=${{ steps.config.outputs.CI_BASE_IMAGE || 'ubuntu:22.04' }}

      - name: Verify build artifacts
        run: |
          # Debug: Show what was created
          echo "Build completed. Checking build directory:"
          ls -la homie_os/docker/build/ || echo "Docker build directory not found"
          ls -la homie_os/build/ || echo "Root build directory not found"
          echo "Looking for artifacts in all locations:"
          find . -name "*.raucb" -o -name "*.ext4" -o -name "*.json" | head -10
          
          # Verify critical artifacts exist (check both possible build directories)
          RAUCB_COUNT=$(find homie_os/docker/build/ homie_os/build/ -name "*.raucb" 2>/dev/null | wc -l)
          if [ "$RAUCB_COUNT" -eq 0 ]; then
            echo "ERROR: No RAUC bundle (.raucb) files found!"
            echo "Docker build directory contents:"
            ls -la homie_os/docker/build/ || echo "Docker build directory doesn't exist"
            echo "Root build directory contents:"
            ls -la homie_os/build/ || echo "Root build directory doesn't exist"
            echo "Checking if RAUC bundle creation failed..."
            find . -name "manifest.raucm" -exec echo "Found manifest: {}" \;
            find . -name "*.ext4" -exec echo "Found rootfs: {}" \;
            exit 1
          fi
          echo "Found $RAUCB_COUNT RAUC bundle(s)"

      - name: Prepare artifacts for upload (flatten directory structure)
        run: |
          echo "Preparing artifacts with flattened structure..."
          mkdir -p ./artifacts-upload
          
          # Copy artifacts from both possible build directories (flatten structure)
          find homie_os/docker/build/ -name "*.raucb" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          find homie_os/docker/build/ -name "*.ext4" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          find homie_os/docker/build/ -name "*.json" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          
          # Also check root build directory as fallback
          find homie_os/build/ -name "*.raucb" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          find homie_os/build/ -name "*.ext4" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          find homie_os/build/ -name "*.json" -exec cp {} ./artifacts-upload/ \; 2>/dev/null || true
          
          echo "Artifacts prepared for upload:"
          ls -la ./artifacts-upload/ || echo "No artifacts found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: homie-os-${{ needs.version.outputs.version }}
          path: ./artifacts-upload/
          retention-days: 30
          if-no-files-found: warn
          include-hidden-files: false
          compression-level: 6

      - name: Debug artifact search
        if: failure()
        run: |
          echo "Artifact upload failed. Searching for files..."
          echo "Current directory: $(pwd)"
          find . -name "*.raucb" -o -name "*.ext4" -o -name "*.json" | head -20
          echo "Directory structure:"
          ls -la homie_os/
          if [ -d homie_os/build ]; then
            echo "Contents of homie_os/build:"
            ls -la homie_os/build/
          else
            echo "homie_os/build directory does not exist"
          fi

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [version, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: homie-os-${{ needs.version.outputs.version }}
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: Homie OS ${{ needs.version.outputs.version }}
          body: |
            # Homie OS ${{ needs.version.outputs.version }}
            
            ## Build Information
            - **Version**: ${{ needs.version.outputs.version }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            
            ## Installation
            1. Download the `.raucb` bundle file
            2. Copy to your Homie device  
            3. Install using RAUC: `rauc install homie-os-${{ needs.version.outputs.version }}.raucb`
            
            ## Files
            - `homie-os-jetson-${{ needs.version.outputs.version }}.raucb` - RAUC update bundle
            - `rootfs.ext4` - Root filesystem image
            - `build-report-${{ needs.version.outputs.version }}.json` - Build metadata
          draft: false
          prerelease: ${{ contains(needs.version.outputs.version, 'alpha') || contains(needs.version.outputs.version, 'beta') || contains(needs.version.outputs.version, 'rc') }}
          files: |
            ./artifacts/*.raucb
            ./artifacts/*.ext4
            ./artifacts/*.json
          token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: always()
    steps:
      - name: Clean up build cache
        run: |
          echo "Cleaning up build cache and temporary files..."
          docker builder prune -f || true
          docker system prune -f || true
