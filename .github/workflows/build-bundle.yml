name: Build and Publish Homie OS Bundle

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0-alpha.1)'
        required: false
        default: ''
      release_type:
        description: 'Release type'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc
          - release

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/homie-os

jobs:
  version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.version }}" ]]; then
            # Manual dispatch with specific version
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tag push - use tag as version (remove 'v' prefix if present)
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            # Generate version based on commit info
            BRANCH_NAME="${{ github.ref_name }}"
            COMMIT_SHA="${{ github.sha }}"
            COMMIT_SHORT="${COMMIT_SHA:0:7}"
            DATE=$(date +%Y%m%d)
            
            if [[ "$BRANCH_NAME" == "main" ]]; then
              VERSION="1.0.0-alpha.${DATE}.${COMMIT_SHORT}"
            else
              # Clean branch name for version
              CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              VERSION="0.0.0-${CLEAN_BRANCH}.${DATE}.${COMMIT_SHORT}"
            fi
          fi
          
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build ARM64 Image and Bundle
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Homie OS
        uses: actions/checkout@v4
        with:
          path: homie_os

      - name: Checkout Homie Orchestrator
        uses: actions/checkout@v4
        with:
          repository: HomieAiOS/homie_orchestrator
          path: homie_orchestrator
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Homie AI
        uses: actions/checkout@v4
        with:
          repository: HomieAiOS/homie_ai
          path: homie_ai
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and create RAUC bundle
        run: |
          cd homie_os
          echo "Building Homie OS ARM64 image and creating RAUC bundle..."
          
          # Create version info
          echo "VERSION=${{ needs.version.outputs.version }}" > .env
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
          echo "COMMIT_SHA=${{ github.sha }}" >> .env
          
          # Set executable permissions
          chmod +x scripts/docker-build.sh
          
          # Run the build script
          ./scripts/docker-build.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: homie-os-${{ needs.version.outputs.version }}
          path: |
            homie_os/build/*.raucb
            homie_os/build/*.ext4
            homie_os/build/*.json
          retention-days: 30

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [version, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: homie-os-${{ needs.version.outputs.version }}
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          name: Homie OS ${{ needs.version.outputs.version }}
          body: |
            # Homie OS ${{ needs.version.outputs.version }}
            
            ## Build Information
            - **Version**: ${{ needs.version.outputs.version }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            
            ## Installation
            1. Download the `.raucb` bundle file
            2. Copy to your Homie device  
            3. Install using RAUC: `rauc install homie-os-${{ needs.version.outputs.version }}.raucb`
            
            ## Files
            - `homie-os-jetson-${{ needs.version.outputs.version }}.raucb` - RAUC update bundle
            - `rootfs.ext4` - Root filesystem image
            - `build-report-${{ needs.version.outputs.version }}.json` - Build metadata
          draft: false
          prerelease: ${{ contains(needs.version.outputs.version, 'alpha') || contains(needs.version.outputs.version, 'beta') || contains(needs.version.outputs.version, 'rc') }}
          files: |
            ./artifacts/*.raucb
            ./artifacts/*.ext4
            ./artifacts/*.json
          token: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: always()
    steps:
      - name: Clean up build cache
        run: |
          echo "Cleaning up build cache and temporary files..."
          docker builder prune -f || true
          docker system prune -f || true
